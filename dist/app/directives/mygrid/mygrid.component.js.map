{"version":3,"sources":["app/directives/mygrid/mygrid.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAsI,eAAe,CAAC,CAAA;AACtJ,gCAAiC,0CAA0C,CAAC,CAAA;AAC5E,iCAAgC,wCAAwC,CAAC,CAAA;AAQzE;IAAA;QAGoB,sBAAiB,GAAoB,EAAqB,CAAC;QAEnE,iBAAY,GAA0B,EAAE,CAAC;IA4BrD,CAAC;IA1BW,qCAAW,GAAnB,UAAoB,OAAsB;QACtC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAEhC,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,OAAO,CAAC,mBAAmB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAE5E,IAAI,OAAO,GAAqB,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC;YAClE,IAAI,YAAY,GAAqB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACpE,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YAEtD,IAAI,CAAC,YAAY,GAAG;gBAChB,MAAM,EAAE,WAAW;gBACnB,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAC,GAAG;gBACV,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,cAAc;gBACxB,QAAQ,EAAE,IAAI;aACjB,CAAA;YACD,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;YAChC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7C,IAAI,CAAC,SAAS,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACnD,CAAC;IACL,CAAC;IA/BD;QAAC,gBAAS,CAAC,SAAS,CAAC;;sDAAA;IAErB;QAAC,YAAK,EAAE;;8DAAA;IATZ;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,SAAS;YACnB,WAAW,EAAE,6CAA6C;YAC1D,aAAa,EAAE,wBAAiB,CAAC,IAAI;SACxC,CAAC;;uBAAA;IAmCF,sBAAC;;AAAD,CAjCA,AAiCC,IAAA;AAjCY,uBAAe,kBAiC3B,CAAA","file":"mygrid.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter, OnChanges, ViewEncapsulation, ViewChild, AfterViewInit, OnInit, SimpleChanges } from \"@angular/core\";\r\nimport { jqxGridComponent } from \"app/external/ts/jqx-grid/angular_jqxgrid\";\r\nimport { IMyGridSettings } from \"app/directives/mygrid/mygrid-interface\";\r\n\r\n@Component({\r\n    selector: \"my-grid\",\r\n    templateUrl: \"app/directives/mygrid/mygrid.component.html\",    \r\n    encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class MyGridComponent implements OnChanges, OnInit, AfterViewInit {\r\n    @ViewChild(\"jqxGrid\") public myJqxGrid: jqxGridComponent;\r\n\r\n    @Input() public inputGridSettings: IMyGridSettings = {} as IMyGridSettings;\r\n\r\n    private gridSettings: jqwidgets.GridOptions = {};\r\n\r\n    private ngOnChanges(changes: SimpleChanges): void {\r\n        this.myJqxGrid.createWidget({});\r\n\r\n        if (changes[\"inputGridSettings\"] && changes[\"inputGridSettings\"].currentValue) {\r\n\r\n            let colDefs: IjqxGridColumn[] = this.inputGridSettings.columnDefs;\r\n            let dataAdapters: IjqxGridSource[] = this.inputGridSettings.rowData;\r\n            let dataAdapter = new $.jqx.dataAdapter(dataAdapters);\r\n\r\n            this.gridSettings = {\r\n                source: dataAdapter,\r\n                columns: colDefs,\r\n                height:210,\r\n                width: 900,\r\n                editmode: \"selectedcell\",\r\n                editable: true\r\n            }\r\n            this.myJqxGrid.clearselection();\r\n            this.myJqxGrid.updatebounddata();\r\n            this.myJqxGrid.setOptions(this.gridSettings);\r\n            this.myJqxGrid.showfiltercolumnbackground(true);\r\n            this.myJqxGrid.refreshdata();\r\n            this.myJqxGrid.scrolloffset(0, 0);\r\n            this.myJqxGrid.createWidget(this.gridSettings);\r\n        }\r\n    }\r\n}"]}